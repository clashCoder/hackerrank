Algorithm:

	- if the number is less than or equal to 2 then the result should be set to -1 (by constraints of
			the problem statement).
    -do the following 3 steps until n is less than 3:	
	- append 5 "3's" to result if n is 5 or n is 10 and subtract 5 from n
	- if n was not 5 or 10, then append 3 "5's" to result and subtract 3 from n
	- if we reach (n == 4) OR (n == 1) then no possible solution exists for initial n so we
		set result to -1
		
	-print result
	
Explanation:

Here are the properties given in the problem
	A Decent Number has the following properties:

	Its digits can only be 3's and/or 5's.
	The number of 3's it contains is divisible by 5.
	The number of 5's it contains is divisible by 3.
	If there are more than one such number, we pick the largest one.
	
by default numbers less than or equal to 1 do not have "A Decent Number". 2 and 4 also do not have "A Decent Number"

From there on, there is a pattern that develops.

for n = 3....only option is "555"
for n = 5....only option is "33333"
for n = 6....only option is "555555"
for n = 7....if we use 5 "3's" then we are left with n = 2 which has no "Decent Number"....likewise if we 
			 	use 3 "5's" then we are left with n = 4 which has no "Decent Number" so 7 has no "Decent
				Number"
for n = 8....we have 2 options:
				1. 3 "5's" + 5 "3's" = "55533333"
				2. 5 "3's" + 3 "5's" = "33333555"
			 the problem states to chose the largest which is the 1st option
for n = 9....only option that works is "555555555"
for n = 10....only option that works is "3333333333"
from there on out we simply we use the results from before to determine the best result

for example when n = 11 we use the solution of n = 8 and append 3 "5's" to the beginning

the algorithm subtracts 3 and appends the 3 "5's" until we reach a base case. if you expand the answers for n = 12 to n = 20, you will see that they all reach a base case and the solution ends up being appending 3 "5's" to beginning and appending the solution to n-3 to the end. 

the base cases then become 5, 4, 1, and 3:
 	in the algorithm when we reach 5 or 3, we have obtained the solution and exit out of while loop
						  we reach 4 or 1, we have obtained the result that there is no solution and
								exit out of while loop
		
	
Running Time:

	Ignoring the for loop needed for the testcases....only looking for running time of the algorithm for an individual set of input.
	For the most part this algorithm is O(N * time complexity of append), where N is the number of digits of the Decent Number.
	